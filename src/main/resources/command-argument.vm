#if($command.argument.multiple)
    public static final class Arguments extends Utils.Delegated<java.util.List<String>> {

        public Arguments(final java.util.function.Supplier<CommandData> data) {
            super(() -> data.get().arguments);
        }

        public Arguments(final CommandData data) {
            this(() -> data);
        }

        public Arguments(final String... arguments) {
            this(new ParsedData(arguments));
        }
    }
#else
    public static final class Argument extends Utils.Delegated<String> {

        public Argument(final java.util.function.Supplier<CommandData> data) {
            super(new Utils.Argument(data));
        }

        public Argument(final CommandData data) {
            this(() -> data);
        }

        public Argument(final String... arguments) {
            this(new ParsedData(arguments));
        }

        public static final class Provided extends Utils.Delegated<Boolean> {

            public Provided(final java.util.function.Supplier<CommandData> data) {
                super(() -> data.get().arguments.isEmpty());
            }

            public Provided(final CommandData data) {
                this(() -> data);
            }

            public Provided(final String... arguments) {
                this(new ParsedData(arguments));
            }
        }
    }
#end
